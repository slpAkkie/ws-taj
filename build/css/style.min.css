/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}@font-face{font-family:Oswald;src:url(../fonts/Oswald-ExtraLight.ttf) format("truetype");font-weight:200}@font-face{font-family:Oswald;src:url(../fonts/Oswald-Light.ttf) format("truetype");font-weight:300}@font-face{font-family:Oswald;src:url(../fonts/Oswald-Regular.ttf) format("truetype");font-weight:400}@font-face{font-family:Oswald;src:url(../fonts/Oswald-Medium.ttf) format("truetype");font-weight:500}@font-face{font-family:Oswald;src:url(../fonts/Oswald-SemiBold.ttf) format("truetype");font-weight:600}@font-face{font-family:Oswald;src:url(../fonts/Oswald-Bold.ttf) format("truetype");font-weight:700}body{font-size:16px;font-family:Oswald;font-weight:400}.full-screen{position:absolute;top:0;right:0;bottom:0;left:0}.full-screen.d-flex.f-center{justify-content:center}.d-flex{display:flex}.d-flex.f-center{align-items:center}.d-flex.f-col{flex-direction:column}.hide{display:none}#TAJ-history{width:100%;height:100%;background-color:#333}.skip{height:25px;padding:10px 0;background-color:#333;text-align:center;position:absolute;right:0;bottom:0;left:0}.skip p{margin:0;padding:0;color:#ccc;letter-spacing:.05rem;word-spacing:.5rem;line-height:1.5}.popup{width:400px;padding:10px 25px 25px 25px;border:1px solid #cecece;border-radius:.75rem;box-shadow:0 0 25px 0 rgba(33,33,33,.1);background-color:#fafafa}.popup input[type=button]{width:200px;padding:5px 0;border:none;border-radius:20px;outline:0;color:#000;background-color:#fff;box-shadow:0 0 15px 0 rgba(33,33,33,.1);cursor:pointer;transition:width .15s ease-in-out}.popup input[type=button]:not([disabled]):hover{width:210px}.popup input[type=button][disabled]{opacity:.25;cursor:default}.first-screen .pick-character .mouses{width:100%;margin-bottom:25px;display:flex;flex-direction:row;justify-content:space-around;align-items:center}.first-screen .pick-character .mouses .mouse{width:100px;height:120px;border-radius:.5rem;overflow:hidden}.first-screen .pick-character .mouses .mouse:hover{box-shadow:0 0 15px 0 rgba(33,33,33,.1)}.first-screen .pick-character .mouses .mouse.picked{box-shadow:0 0 15px 0 rgba(33,33,33,.1);transform:translateY(-5px)}.first-screen .pick-character .mouses img{width:100px;height:auto;cursor:pointer}.second-screen input[type=text]{height:20px;padding:5px 15px;margin:0 0 20px 0;border:none;border-bottom:1px solid #333;border-radius:.25rem .25rem 0 0;outline:0}.second-screen input[type=text]:invalid{opacity:.5}.third-screen table{width:100%}.third-screen table th{font-size:1.15rem;text-align:left;border-bottom:1px solid #333}.third-screen table td,.third-screen table th{padding:4px 8px}.third-screen input[type=button]{margin-top:20px}.game-UI{margin:25px;font-size:1.5rem;color:#fff}.game-UI .absolute{top:0;position:absolute}.game-UI .absolute.left{left:0}.game-UI .absolute.right{text-align:right;right:0}.game-UI .absolute>*{margin:2px 0}.game-UI span.data{color:#a7fffb}.game-UI .eaten-cheese{margin-top:10px;font-size:1.25em}.game-UI .eaten-cheese img{margin-right:25px}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
